# @see https://scrutinizer-ci.com/docs/configuration/build_reference
build:
  nodes:
#    analysis:
#      tests:
#        override:
#          # Add the respective Scrutinizer analysis for your language like
#          - js-scrutinizer-run
#          - php-scrutinizer-run
#      dependencies:
#        before:
#          # Disable warnings of "The function *** was not found" which suggests inserting `/** @scrutinizer ignore-call */`.
#          # @see https://scrutinizer-ci.com/docs/tools/php/php-scrutinizer/analyzing-wordpress
#          - composer require --dev johnpbloch/wordpress
#    test-with-php54:
#      environment:
#        php:
#          version: 5.4
#    test-with-php56:
#      environment:
#        php:
#          version: 5.6
#    test-with-php72:
#      environment:
#        php:
#          version: 7.2
#    test-with-php73:
#      environment:
#        php:
#          version: 7.3
    test-with-php74:
      tests:
        override:
          - command: bash ./test/run.sh -c ./test/settings.scrutinizer.cfg -l 'coverage.xml';
            coverage:
              file: ./coverage.xml
              format: clover
#    test-with-php80:
#      environment:
#        php:
#          version: 8.0
#    test-with-php74-mu:
#      environment:
#        variables:
#          WP_VERSION: latest
#          WP_MULTISITE: 1

  services:
#    mysql: 5.7
    mariadb: 10

#  dependencies:
#    before:
#      - echo "MySQL VERSION:"
#      - mysql -V

  environment:
    hosts:
      local.dev: '127.0.0.1'
    variables:
      WP_VERSION: latest
      WP_MULTISITE: 0
      TEMP: /tmp
    php:
      version: 7.4
    apache2:
      modules: ['rewrite']
      sites:
        symfony_app:
            web_root: 'web/'
            host: 'local.dev'

  # Follows the same structure like the dependencies section.
  # Used for running your tests and open-source analysis tools.
  # We will execute all commands even if one of them fails.
  tests:
    # If true, tests execution will stop by any command failure. @see https://scrutinizer-ci.com/docs/build/stop_tests_running_on_failure
    stop_on_failure: true
    before:
      -
        command: mysql -h 127.0.0.1 -P 3306 -u root -p
        on_node: 2
      -
        command: service apache2 start
        on_node: 1
      -
        command: bash ./test/install.sh -c ./test/settings.scrutinizer.cfg
        on_node: 1
    # before:
    #  - command:
    #    stop_on_failure: true # If true, tests execution will stop when this command failed.
    override:
      - bash ./test/run.sh -c ./test/settings.scrutinizer.cfg;
    # after: [ ]

  # Used for deployment.
  # Will only be executed if all tests succeeded.
  # If run in parallel, will be executed in the container where tests finish last.
  # deployment:
    # - # Optional. If this should only be executed for pushes to a certain branch.
      # branch: master            # The branch name is exactly "master"
      # branch: '/^feature/'      # Any branch name that starts with "feature"
      # commands:
      #   - aws s3 cp my-file s3://my-bucket/my-file
      #   - git push heroku master
      #   - or-any-other-command

checks:
  php:
    code_rating: true
    duplication: false
    #tools:
    # php_sim: true
    # php_pdepend: true
    # php_analyzer: true
    # php_code_coverage: true # must be removed if using external code coverage
    # external_code_coverage:
    # timeout: 1800    # 30 minutes (in seconds.)
filter:
  excluded_paths:
    - 'library/*'
    - 'tool/*'
    - 'test/*'
    - 'example/*'
    - '*/library/*'
    - '*.bundle.js'
    - '*.min.js'
  dependency_paths:
    # @see https://scrutinizer-ci.com/docs/tools/php/php-scrutinizer/analyzing-wordpress
    - wordpress/
    - veondor/
    - library/
    - node_modules/

coding_style:
  php:
    indentation:
      general:
        use_tabs: false
        size: 4
      switch:
        indent_case: true
    spaces:
      before_parentheses:
        function_declaration: false
        closure_definition: false
        function_call: false
        if: true
        for: true
        while: true
        switch: true
        catch: true
        array_initializer: false
      around_operators:
        assignment: true
        logical: true
        equality: true
        relational: true
        bitwise: true
        additive: true
        multiplicative: true
        shift: true
        unary_additive: false
        concatenation: false
        negation: false
      before_left_brace:
        class: true
        function: true
        if: true
        else: true
        for: true
        while: true
        do: true
        switch: true
        try: true
        catch: true
        finally: true
      before_keywords:
        else: true
        while: true
        catch: true
        finally: true
      within:
        brackets: true
        array_initializer: true
        grouping: true
        function_call: true
        function_declaration: true
        if: true
        for: true
        while: true
        switch: true
        catch: true
        type_cast: true
      ternary_operator:
        before_condition: true
        after_condition: true
        before_alternative: true
        after_alternative: true
        in_short_version: false
      other:
        before_comma: false
        after_comma: true
        before_semicolon: false
        after_semicolon: true
        after_type_cast: true
    braces:
      classes_functions:
        class: end-of-line
        function: end-of-line
        closure: end-of-line
      if:
        opening: end-of-line
        always: true
        else_on_new_line: false
      for:
        opening: end-of-line
        always: true
      while:
        opening: end-of-line
        always: true
      do_while:
        opening: end-of-line
        always: true
        while_on_new_line: false
      switch:
        opening: end-of-line
      try:
        opening: end-of-line
        catch_on_new_line: false
        finally_on_new_line: false